module Exercise3 (histogram) where

import           Data.List

{-
Model the solution as "drawing" on a 2d bar chart.

> the number of slots is given as [0..9]
> each bar consists of the "base" (=), the "bar" (*), and the space
> the height of the chart is the same as the highest bar
> each bar is generated by drawing the '*' character n times, with
n being the number of occurrence of a certain number between 0 to 9.
> short bars are padded with space ' ' character to ensure that
they have the same height

lastly, each bar is stored in a string which is in turn stored in
  a list; the entire histogram is generated by transposing this
  list ("rotating" the bar chart)
-}
histogram :: [Integer] -> String
histogram xs = unlines $ transpose $ map (\n -> space n ++ bar n ++ base n) cols
  where
    cols = [0..9]
    height = maximum $ map (\n -> length [x | x <- xs, x == n]) cols
    bar n = replicate (length $ filter (==n) xs) '*'
    space n = replicate (height - length (bar n)) ' '
    base n = "=" ++ show n
